<h1>Ozobot Code Reader</h1>
<p>Align center patch of pixels in the video frame with the "loading" area in OzoBlockly. The "Flash Code" colors are Red (R), Green (G), Blue (B), Cyan (C), Magenta (M), Yellow (Y), Black (K) and White (W), displayed below.</p>
<video id="video" style="display: none" width="320" height="240" autoplay></video>
<canvas id="canvas" width="640" height="480"></canvas>
<h3 id="code"></h3>
<button id="start">Start</button>
<button id="stop">Stop</button>

<script>
const WIDTH = 320,
      HEIGHT = 240;

function similarity(r0, g0, b0, r1, g1, b1) {
  // Euclidean distance in RGB space
  // Each of R, G, B, C, M, Y, K, W are at the extreeme corners of the RGB "cube" - very easy to distinguish
  let r = r0 - r1; 
  let g = g0 - g1; 
  let b = b0 - b1; 
  return Math.sqrt(r * r + g * g + b * b); 
}

let recording = false;
let code = ""; 
let last = ''; 
// let lastMs = 0;

function updateCode(c) {
  if (recording && c) {
    if (last != c) {
      // let ms = (new Date()).getTime();
      // let ellapsed = ms - lastMs;
      // code += c + " (" + ellapsed + "}<br />";
      code += c;
      last = c;
      // lastMs = ms;
    }   
  }
  document.getElementById("code").innerHTML = code;
}

function onTick(context) {
  context.drawImage(video, 0, 0, WIDTH, HEIGHT);
  let frame = context.getImageData(0, 0, WIDTH, HEIGHT);

  // sample center patch of pixels
  const PATCH = 48; // pixels in the center
  const mx = WIDTH / 2;
  const my = HEIGHT / 2;
  let r = 0,
      g = 0,
      b = 0;
  for (let x = mx - PATCH; x < mx + PATCH; x++) {
    for (let y = my - PATCH; y < my + PATCH; y++) {
      let i = (x + y * WIDTH) * 4;
      r += frame.data[i + 0]; 
      g += frame.data[i + 1]; 
      b += frame.data[i + 2]; 
    }   
  }
 const TOTAL_PATCH = (PATCH * 2) * (PATCH * 2); 
  r /= TOTAL_PATCH; // average
  g /= TOTAL_PATCH;
  b /= TOTAL_PATCH;

  // detect color
  let rSim = similarity(r, g, b, 255,   0,   0); // R
  let gSim = similarity(r, g, b, 0,   255,   0); // G
  let bSim = similarity(r, g, b, 0,     0, 255); // B
  let cSim = similarity(r, g, b, 0,   255, 255); // G+B
  let mSim = similarity(r, g, b, 255,   0, 255); // R+B
  let ySim = similarity(r, g, b, 255, 255,   0); // R+G
  let wSim = similarity(r, g, b, 255, 255, 255); // R+G+B
  let kSim = similarity(r, g, b,   0,   0,   0); // None

  let c = '?';
  let cR = 0;
  let cG = 0;
  let cB = 0;
  let m = 1000000;
  if (rSim < m) { c = 'R'; m = rSim; cR = 255; cG =   0; cB =   0; } // R
  if (gSim < m) { c = 'G'; m = gSim; cR =   0; cG = 255; cB =   0; } // G
  if (bSim < m) { c = 'B'; m = gSim; cR =   0; cG =   0; cB = 255; } // B
  if (cSim < m) { c = 'C'; m = cSim; cR =   0, cG = 255, cB = 255; } // G+B
  if (mSim < m) { c = 'M'; m = mSim; cR = 255, cG =   0, cB = 255; } // R+B
  if (ySim < m) { c = 'Y'; m = ySim; cR = 255, cG = 255, cB =   0; } // R+G
  if (wSim < m) { c = 'W'; m = wSim; cR = 255, cG = 255, cB = 255; } // R+G+B
  if (kSim < m) { c = 'K'; m = kSim; cR =   0, cG =   0,   cB = 0; } // None
  updateCode(c);

  // display detected color
  for (let x = mx - (PATCH + 4); x < mx + PATCH + 4; x++) {
    for (let y = my - (PATCH + 4); y < my + PATCH + 4; y++) {
      let i = (x + y * WIDTH) * 4;
      frame.data[i + 0] = cR;
      frame.data[i + 1] = cG;
      frame.data[i + 2] = cB;
    }
  }

  // display average patch
  for (let x = mx - PATCH; x < mx + PATCH; x++) {
    for (let y = my - PATCH; y < my + PATCH; y++) {
      let i = (x + y * WIDTH) * 4;
      frame.data[i + 0] = r;
      frame.data[i + 1] = g;
      frame.data[i + 2] = b;
    }
  }

  context.putImageData(frame, 0, 0);
  setTimeout(function () { onTick(context); }, 0);
}

window.addEventListener("DOMContentLoaded", function() {
  // Grab elements, create settings, etc.
  var canvas = document.getElementById("canvas"),
      context = canvas.getContext("2d"),
      video = document.getElementById("video"),
      videoObj = { "video": true },
      errBack = function(error) {
        Alert("Video capture error: ", error.code);
      };

  // Put video listeners into place
  if(navigator.getUserMedia) { // Standard
    navigator.getUserMedia(videoObj, function(stream) {
      video.src = stream;
      video.play();
    }, errBack);
  } else if(navigator.webkitGetUserMedia) { // WebKit-prefixed
    navigator.webkitGetUserMedia(videoObj, function(stream){
      video.src = window.webkitURL.createObjectURL(stream);
      video.play();
    }, errBack);
  }
  else if(navigator.mozGetUserMedia) { // Firefox-prefixed
    navigator.mozGetUserMedia(videoObj, function(stream){
      video.src = window.URL.createObjectURL(stream);
      video.play();
    }, errBack);
  }

  document.getElementById("start").addEventListener("click", function() {
    recording = true;
    code = "";
    updateCode();
  });

  document.getElementById("stop").addEventListener("click", function() {
    recording = false;
  });

  setTimeout(function () { onTick(context); }, 0);
}, false);
</script>
